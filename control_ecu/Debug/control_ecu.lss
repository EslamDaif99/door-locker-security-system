
control_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002956  000029ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800074  00800074  000029fe  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c8  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a364  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a751  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <main>
      8a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
 ******************************************************************************/

#include "buzzer.h"
#include "gpio.h"

void BUZZER_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_on>:

void BUZZER_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_off>:

void BUZZER_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID, LOGIC_LOW);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <save_new_password>:

uint8 entered_password[PASSWORD_SIZE];
static uint32 g_tick=0;
/*******************************************************************************
 *********************     Functions Definitions    ***************************/
void save_new_password(void){
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	2f 97       	sbiw	r28, 0x0f	; 15
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
	uint8 i ;

	for(i=0;i<PASSWORD_SIZE;i++)
     bb0:	1f 86       	std	Y+15, r1	; 0x0f
     bb2:	85 c0       	rjmp	.+266    	; 0xcbe <save_new_password+0x126>
	{
		UART_sendByte(MC2_READY);
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
		EEPROM_writeByte(EEPROM_ADDRESS+i,UART_recieveByte());
     bba:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	8f 5e       	subi	r24, 0xEF	; 239
     bc2:	9c 4f       	sbci	r25, 0xFC	; 252
     bc4:	8c 01       	movw	r16, r24
     bc6:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
     bca:	28 2f       	mov	r18, r24
     bcc:	c8 01       	movw	r24, r16
     bce:	62 2f       	mov	r22, r18
     bd0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e2       	ldi	r26, 0x20	; 32
     bda:	b1 e4       	ldi	r27, 0x41	; 65
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ad 87       	std	Y+13, r26	; 0x0d
     be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8f 83       	std	Y+7, r24	; 0x07
     bfe:	98 87       	std	Y+8, r25	; 0x08
     c00:	a9 87       	std	Y+9, r26	; 0x09
     c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <save_new_password+0x8e>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <save_new_password+0x10c>
	else if (__tmp > 65535)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <save_new_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c40:	7c 85       	ldd	r23, Y+12	; 0x0c
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <save_new_password+0xee>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <save_new_password+0xdc>
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <save_new_password+0xd0>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <save_new_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <save_new_password+0x118>
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
/*******************************************************************************
 *********************     Functions Definitions    ***************************/
void save_new_password(void){
	uint8 i ;

	for(i=0;i<PASSWORD_SIZE;i++)
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	8f 87       	std	Y+15, r24	; 0x0f
     cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <save_new_password+0x12e>
     cc4:	77 cf       	rjmp	.-274    	; 0xbb4 <save_new_password+0x1c>
	{
		UART_sendByte(MC2_READY);
		EEPROM_writeByte(EEPROM_ADDRESS+i,UART_recieveByte());
		_delay_ms(10);
	}
}
     cc6:	2f 96       	adiw	r28, 0x0f	; 15
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <get_password>:
/******************************************************************************/
void get_password(void){
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	0f 92       	push	r0
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	uint8 i ;

	for(i=0;i<PASSWORD_SIZE;i++)
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <get_password+0x30>
	{
		UART_sendByte(MC2_READY);
     cee:	80 e1       	ldi	r24, 0x10	; 16
     cf0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
		entered_password[i]=UART_recieveByte();
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	08 2f       	mov	r16, r24
     cf8:	10 e0       	ldi	r17, 0x00	; 0
     cfa:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
     cfe:	f8 01       	movw	r30, r16
     d00:	e6 58       	subi	r30, 0x86	; 134
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 83       	st	Z, r24
}
/******************************************************************************/
void get_password(void){
	uint8 i ;

	for(i=0;i<PASSWORD_SIZE;i++)
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	85 30       	cpi	r24, 0x05	; 5
     d10:	70 f3       	brcs	.-36     	; 0xcee <get_password+0x12>
	{
		UART_sendByte(MC2_READY);
		entered_password[i]=UART_recieveByte();
	}
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <check_password>:
/******************************************************************************/
uint8 check_password(void){
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	65 97       	sbiw	r28, 0x15	; 21
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_SIZE];
	for(uint8 i=0 ;i<PASSWORD_SIZE;i++)
     d32:	1f 86       	std	Y+15, r1	; 0x0f
     d34:	9b c0       	rjmp	.+310    	; 0xe6c <check_password+0x14e>
	{
		EEPROM_readByte(EEPROM_ADDRESS+i,&password[i]);
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	8f 5e       	subi	r24, 0xEF	; 239
     d3e:	9c 4f       	sbci	r25, 0xFC	; 252
     d40:	ac 01       	movw	r20, r24
     d42:	8f 85       	ldd	r24, Y+15	; 0x0f
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9e 01       	movw	r18, r28
     d4a:	20 5f       	subi	r18, 0xF0	; 240
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	28 0f       	add	r18, r24
     d50:	39 1f       	adc	r19, r25
     d52:	ca 01       	movw	r24, r20
     d54:	b9 01       	movw	r22, r18
     d56:	0e 94 2d 09 	call	0x125a	; 0x125a <EEPROM_readByte>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	a0 e2       	ldi	r26, 0x20	; 32
     d60:	b1 e4       	ldi	r27, 0x41	; 65
     d62:	8b 87       	std	Y+11, r24	; 0x0b
     d64:	9c 87       	std	Y+12, r25	; 0x0c
     d66:	ad 87       	std	Y+13, r26	; 0x0d
     d68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d70:	9e 85       	ldd	r25, Y+14	; 0x0e
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	4a ef       	ldi	r20, 0xFA	; 250
     d78:	54 e4       	ldi	r21, 0x44	; 68
     d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	8f 83       	std	Y+7, r24	; 0x07
     d84:	98 87       	std	Y+8, r25	; 0x08
     d86:	a9 87       	std	Y+9, r26	; 0x09
     d88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d8a:	6f 81       	ldd	r22, Y+7	; 0x07
     d8c:	78 85       	ldd	r23, Y+8	; 0x08
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	2c f4       	brge	.+10     	; 0xdac <check_password+0x8e>
		__ticks = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
     daa:	3f c0       	rjmp	.+126    	; 0xe2a <check_password+0x10c>
	else if (__tmp > 65535)
     dac:	6f 81       	ldd	r22, Y+7	; 0x07
     dae:	78 85       	ldd	r23, Y+8	; 0x08
     db0:	89 85       	ldd	r24, Y+9	; 0x09
     db2:	9a 85       	ldd	r25, Y+10	; 0x0a
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	3f ef       	ldi	r19, 0xFF	; 255
     db8:	4f e7       	ldi	r20, 0x7F	; 127
     dba:	57 e4       	ldi	r21, 0x47	; 71
     dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc0:	18 16       	cp	r1, r24
     dc2:	4c f5       	brge	.+82     	; 0xe16 <check_password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e2       	ldi	r20, 0x20	; 32
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
     dec:	0f c0       	rjmp	.+30     	; 0xe0c <check_password+0xee>
     dee:	88 ec       	ldi	r24, 0xC8	; 200
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <check_password+0xdc>
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	69 f7       	brne	.-38     	; 0xdee <check_password+0xd0>
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <check_password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e16:	6f 81       	ldd	r22, Y+7	; 0x07
     e18:	78 85       	ldd	r23, Y+8	; 0x08
     e1a:	89 85       	ldd	r24, Y+9	; 0x09
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <check_password+0x118>
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(password[i]!=entered_password[i]){
     e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	ce 01       	movw	r24, r28
     e46:	40 96       	adiw	r24, 0x10	; 16
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	20 81       	ld	r18, Z
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	fc 01       	movw	r30, r24
     e58:	e6 58       	subi	r30, 0x86	; 134
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	80 81       	ld	r24, Z
     e5e:	28 17       	cp	r18, r24
     e60:	11 f0       	breq	.+4      	; 0xe66 <check_password+0x148>
			return FALSE;
     e62:	1d 8a       	std	Y+21, r1	; 0x15
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <check_password+0x15a>
	}
}
/******************************************************************************/
uint8 check_password(void){
	uint8 password[PASSWORD_SIZE];
	for(uint8 i=0 ;i<PASSWORD_SIZE;i++)
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	8f 87       	std	Y+15, r24	; 0x0f
     e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	08 f4       	brcc	.+2      	; 0xe74 <check_password+0x156>
     e72:	61 cf       	rjmp	.-318    	; 0xd36 <check_password+0x18>
		_delay_ms(10);
		if(password[i]!=entered_password[i]){
			return FALSE;
		}
	}
	return TRUE;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	8d 8b       	std	Y+21, r24	; 0x15
     e78:	8d 89       	ldd	r24, Y+21	; 0x15
}
     e7a:	65 96       	adiw	r28, 0x15	; 21
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <open_stop_close>:
/******************************************************************************/
/*
 * Description :
 * used for open the door and close it again
 */
void open_stop_close(void){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
	g_tick++ ;
     e94:	80 91 74 00 	lds	r24, 0x0074
     e98:	90 91 75 00 	lds	r25, 0x0075
     e9c:	a0 91 76 00 	lds	r26, 0x0076
     ea0:	b0 91 77 00 	lds	r27, 0x0077
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	a1 1d       	adc	r26, r1
     ea8:	b1 1d       	adc	r27, r1
     eaa:	80 93 74 00 	sts	0x0074, r24
     eae:	90 93 75 00 	sts	0x0075, r25
     eb2:	a0 93 76 00 	sts	0x0076, r26
     eb6:	b0 93 77 00 	sts	0x0077, r27
	if(g_tick == FIFTEEN_SECONDS){
     eba:	80 91 74 00 	lds	r24, 0x0074
     ebe:	90 91 75 00 	lds	r25, 0x0075
     ec2:	a0 91 76 00 	lds	r26, 0x0076
     ec6:	b0 91 77 00 	lds	r27, 0x0077
     eca:	85 3d       	cpi	r24, 0xD5	; 213
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	92 07       	cpc	r25, r18
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	a2 07       	cpc	r26, r18
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	b2 07       	cpc	r27, r18
     ed8:	31 f4       	brne	.+12     	; 0xee6 <open_stop_close+0x5a>
		DcMotor_Rotate(STOP);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 ac 08 	call	0x1158	; 0x1158 <DcMotor_Rotate>
		UART_sendByte(DOOR_OPENED);
     ee0:	85 e0       	ldi	r24, 0x05	; 5
     ee2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>

	}
	if(g_tick ==(THREE_SECONDS+FIFTEEN_SECONDS)){
     ee6:	80 91 74 00 	lds	r24, 0x0074
     eea:	90 91 75 00 	lds	r25, 0x0075
     eee:	a0 91 76 00 	lds	r26, 0x0076
     ef2:	b0 91 77 00 	lds	r27, 0x0077
     ef6:	83 33       	cpi	r24, 0x33	; 51
     ef8:	22 e0       	ldi	r18, 0x02	; 2
     efa:	92 07       	cpc	r25, r18
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	a2 07       	cpc	r26, r18
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	b2 07       	cpc	r27, r18
     f04:	19 f4       	brne	.+6      	; 0xf0c <open_stop_close+0x80>
		DcMotor_Rotate(A_CLOCKWISE);
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	0e 94 ac 08 	call	0x1158	; 0x1158 <DcMotor_Rotate>
	}
	if(g_tick ==(THREE_SECONDS+FIFTEEN_SECONDS+FIFTEEN_SECONDS)){
     f0c:	80 91 74 00 	lds	r24, 0x0074
     f10:	90 91 75 00 	lds	r25, 0x0075
     f14:	a0 91 76 00 	lds	r26, 0x0076
     f18:	b0 91 77 00 	lds	r27, 0x0077
     f1c:	88 30       	cpi	r24, 0x08	; 8
     f1e:	24 e0       	ldi	r18, 0x04	; 4
     f20:	92 07       	cpc	r25, r18
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	a2 07       	cpc	r26, r18
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	b2 07       	cpc	r27, r18
     f2a:	81 f4       	brne	.+32     	; 0xf4c <open_stop_close+0xc0>
		DcMotor_Rotate(STOP);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 ac 08 	call	0x1158	; 0x1158 <DcMotor_Rotate>
		UART_sendByte(DOOR_CLOSED);
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
		g_tick=0;
     f38:	10 92 74 00 	sts	0x0074, r1
     f3c:	10 92 75 00 	sts	0x0075, r1
     f40:	10 92 76 00 	sts	0x0076, r1
     f44:	10 92 77 00 	sts	0x0077, r1
		TIMER0_deInit();
     f48:	0e 94 35 12 	call	0x246a	; 0x246a <TIMER0_deInit>
	}
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <alarm>:
/******************************************************************************/
/*
 * Description :
 * it is make buzzer on for 1 minute
 */
void alarm(void){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	g_tick++ ;
     f5a:	80 91 74 00 	lds	r24, 0x0074
     f5e:	90 91 75 00 	lds	r25, 0x0075
     f62:	a0 91 76 00 	lds	r26, 0x0076
     f66:	b0 91 77 00 	lds	r27, 0x0077
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	a1 1d       	adc	r26, r1
     f6e:	b1 1d       	adc	r27, r1
     f70:	80 93 74 00 	sts	0x0074, r24
     f74:	90 93 75 00 	sts	0x0075, r25
     f78:	a0 93 76 00 	sts	0x0076, r26
     f7c:	b0 93 77 00 	sts	0x0077, r27
	if(g_tick == ONE_MINUTE){
     f80:	80 91 74 00 	lds	r24, 0x0074
     f84:	90 91 75 00 	lds	r25, 0x0075
     f88:	a0 91 76 00 	lds	r26, 0x0076
     f8c:	b0 91 77 00 	lds	r27, 0x0077
     f90:	83 35       	cpi	r24, 0x53	; 83
     f92:	27 e0       	ldi	r18, 0x07	; 7
     f94:	92 07       	cpc	r25, r18
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	a2 07       	cpc	r26, r18
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	b2 07       	cpc	r27, r18
     f9e:	79 f4       	brne	.+30     	; 0xfbe <alarm+0x6c>
		BUZZER_off();
     fa0:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_off>
		UART_sendByte(SAFED);
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
		g_tick=0;
     faa:	10 92 74 00 	sts	0x0074, r1
     fae:	10 92 75 00 	sts	0x0075, r1
     fb2:	10 92 76 00 	sts	0x0076, r1
     fb6:	10 92 77 00 	sts	0x0077, r1
		TIMER0_deInit();
     fba:	0e 94 35 12 	call	0x246a	; 0x246a <TIMER0_deInit>
	}
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <main>:
/*******************************************************************************
 *********************         main Function        ***************************/
int main(void){
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2e 97       	sbiw	r28, 0x0e	; 14
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61

	SREG |=(1<<7);  /*for interrupt */
     fd8:	af e5       	ldi	r26, 0x5F	; 95
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ef e5       	ldi	r30, 0x5F	; 95
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	8c 93       	st	X, r24
	BUZZER_init();
     fe6:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	UART_ConfigFrame uart_config ={DATA_BITS_8,DISABLED,STOP_BIT_1,9600};  /*configuration of UART*/
     fea:	9e 01       	movw	r18, r28
     fec:	2f 5f       	subi	r18, 0xFF	; 255
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	3b 87       	std	Y+11, r19	; 0x0b
     ff2:	2a 87       	std	Y+10, r18	; 0x0a
     ff4:	8c e6       	ldi	r24, 0x6C	; 108
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	9d 87       	std	Y+13, r25	; 0x0d
     ffa:	8c 87       	std	Y+12, r24	; 0x0c
     ffc:	97 e0       	ldi	r25, 0x07	; 7
     ffe:	9e 87       	std	Y+14, r25	; 0x0e
    1000:	ec 85       	ldd	r30, Y+12	; 0x0c
    1002:	fd 85       	ldd	r31, Y+13	; 0x0d
    1004:	00 80       	ld	r0, Z
    1006:	2c 85       	ldd	r18, Y+12	; 0x0c
    1008:	3d 85       	ldd	r19, Y+13	; 0x0d
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	3d 87       	std	Y+13, r19	; 0x0d
    1010:	2c 87       	std	Y+12, r18	; 0x0c
    1012:	ea 85       	ldd	r30, Y+10	; 0x0a
    1014:	fb 85       	ldd	r31, Y+11	; 0x0b
    1016:	00 82       	st	Z, r0
    1018:	2a 85       	ldd	r18, Y+10	; 0x0a
    101a:	3b 85       	ldd	r19, Y+11	; 0x0b
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	3b 87       	std	Y+11, r19	; 0x0b
    1022:	2a 87       	std	Y+10, r18	; 0x0a
    1024:	3e 85       	ldd	r19, Y+14	; 0x0e
    1026:	31 50       	subi	r19, 0x01	; 1
    1028:	3e 87       	std	Y+14, r19	; 0x0e
    102a:	8e 85       	ldd	r24, Y+14	; 0x0e
    102c:	88 23       	and	r24, r24
    102e:	41 f7       	brne	.-48     	; 0x1000 <main+0x3c>
	UART_init(&uart_config);
    1030:	ce 01       	movw	r24, r28
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <UART_init>
	TWI_init();
    1038:	0e 94 65 12 	call	0x24ca	; 0x24ca <TWI_init>


	while(1)
	{
		switch(UART_recieveByte())
    103c:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
    1040:	e8 2f       	mov	r30, r24
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	f9 87       	std	Y+9, r31	; 0x09
    1046:	e8 87       	std	Y+8, r30	; 0x08
    1048:	28 85       	ldd	r18, Y+8	; 0x08
    104a:	39 85       	ldd	r19, Y+9	; 0x09
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	c9 f0       	breq	.+50     	; 0x1084 <main+0xc0>
    1052:	88 85       	ldd	r24, Y+8	; 0x08
    1054:	99 85       	ldd	r25, Y+9	; 0x09
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	91 05       	cpc	r25, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <main+0xa4>
    105c:	e8 85       	ldd	r30, Y+8	; 0x08
    105e:	f9 85       	ldd	r31, Y+9	; 0x09
    1060:	e1 30       	cpi	r30, 0x01	; 1
    1062:	f1 05       	cpc	r31, r1
    1064:	61 f0       	breq	.+24     	; 0x107e <main+0xba>
    1066:	ea cf       	rjmp	.-44     	; 0x103c <main+0x78>
    1068:	28 85       	ldd	r18, Y+8	; 0x08
    106a:	39 85       	ldd	r19, Y+9	; 0x09
    106c:	24 30       	cpi	r18, 0x04	; 4
    106e:	31 05       	cpc	r19, r1
    1070:	f9 f0       	breq	.+62     	; 0x10b0 <main+0xec>
    1072:	88 85       	ldd	r24, Y+8	; 0x08
    1074:	99 85       	ldd	r25, Y+9	; 0x09
    1076:	87 30       	cpi	r24, 0x07	; 7
    1078:	91 05       	cpc	r25, r1
    107a:	b9 f1       	breq	.+110    	; 0x10ea <main+0x126>
    107c:	df cf       	rjmp	.-66     	; 0x103c <main+0x78>
		{
		case MAIN_PASSWORD:
			save_new_password();
    107e:	0e 94 cc 05 	call	0xb98	; 0xb98 <save_new_password>
    1082:	dc cf       	rjmp	.-72     	; 0x103c <main+0x78>

			break ;
		case COMPARE_PASSWORD:
			get_password();
    1084:	0e 94 6e 06 	call	0xcdc	; 0xcdc <get_password>
			if(check_password()==TRUE)
    1088:	0e 94 8f 06 	call	0xd1e	; 0xd1e <check_password>
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	41 f4       	brne	.+16     	; 0x10a0 <main+0xdc>
			{
				while(UART_recieveByte()!=MC2_READY)
    1090:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
    1094:	80 31       	cpi	r24, 0x10	; 16
    1096:	e1 f7       	brne	.-8      	; 0x1090 <main+0xcc>
				{
					/*****NOTHING******/
				}
				UART_sendByte(IDEDENTICAL_PASSWORD);
    1098:	83 e0       	ldi	r24, 0x03	; 3
    109a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
    109e:	ce cf       	rjmp	.-100    	; 0x103c <main+0x78>
			}
			else
			{
				while(UART_recieveByte()!=MC2_READY)
    10a0:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
    10a4:	80 31       	cpi	r24, 0x10	; 16
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <main+0xdc>
				{
					/*****NOTHING******/
				}
				UART_sendByte(FALSE);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
    10ae:	c6 cf       	rjmp	.-116    	; 0x103c <main+0x78>
			}
			break;
		case OPEN_DOOR:
			g_tick=0;
    10b0:	10 92 74 00 	sts	0x0074, r1
    10b4:	10 92 75 00 	sts	0x0075, r1
    10b8:	10 92 76 00 	sts	0x0076, r1
    10bc:	10 92 77 00 	sts	0x0077, r1
			SREG |=(1<<7);
    10c0:	af e5       	ldi	r26, 0x5F	; 95
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ef e5       	ldi	r30, 0x5F	; 95
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 68       	ori	r24, 0x80	; 128
    10cc:	8c 93       	st	X, r24
			TIMER0_setCallBack(open_stop_close);
    10ce:	86 e4       	ldi	r24, 0x46	; 70
    10d0:	97 e0       	ldi	r25, 0x07	; 7
    10d2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TIMER0_setCallBack>
			DcMotor_Init();
    10d6:	0e 94 91 08 	call	0x1122	; 0x1122 <DcMotor_Init>
			DcMotor_Rotate(CLOCKWISE);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 ac 08 	call	0x1158	; 0x1158 <DcMotor_Rotate>
			TIMER0_init(&timer0_config);
    10e0:	88 e6       	ldi	r24, 0x68	; 104
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 ef 11 	call	0x23de	; 0x23de <TIMER0_init>
    10e8:	a9 cf       	rjmp	.-174    	; 0x103c <main+0x78>
			break;
		case ERROR_ALARM :
			g_tick=0;
    10ea:	10 92 74 00 	sts	0x0074, r1
    10ee:	10 92 75 00 	sts	0x0075, r1
    10f2:	10 92 76 00 	sts	0x0076, r1
    10f6:	10 92 77 00 	sts	0x0077, r1
			SREG |=(1<<7);
    10fa:	af e5       	ldi	r26, 0x5F	; 95
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ef e5       	ldi	r30, 0x5F	; 95
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	8c 93       	st	X, r24
			TIMER0_setCallBack(alarm);
    1108:	89 ea       	ldi	r24, 0xA9	; 169
    110a:	97 e0       	ldi	r25, 0x07	; 7
    110c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TIMER0_setCallBack>
			TIMER0_init(&timer0_config);
    1110:	88 e6       	ldi	r24, 0x68	; 104
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 ef 11 	call	0x23de	; 0x23de <TIMER0_init>
			BUZZER_init();
    1118:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
			BUZZER_on();
    111c:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_on>
    1120:	8d cf       	rjmp	.-230    	; 0x103c <main+0x78>

00001122 <DcMotor_Init>:


/******************************************************************************
 *****************           function definitions        **********************/

void DcMotor_Init(void){
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	/* configure motor pins as output pins */

	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	66 e0       	ldi	r22, 0x06	; 6
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	67 e0       	ldi	r22, 0x07	; 7
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>

	/* Motor is stop at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	66 e0       	ldi	r22, 0x06	; 6
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	67 e0       	ldi	r22, 0x07	; 7
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <DcMotor_Rotate>:



void DcMotor_Rotate(DcMotor_State state){
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <DcMotor_Rotate+0x6>
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01

	switch(state)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3b 83       	std	Y+3, r19	; 0x03
    116e:	2a 83       	std	Y+2, r18	; 0x02
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	a1 f0       	breq	.+40     	; 0x11a2 <DcMotor_Rotate+0x4a>
    117a:	2a 81       	ldd	r18, Y+2	; 0x02
    117c:	3b 81       	ldd	r19, Y+3	; 0x03
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <DcMotor_Rotate+0x60>
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	01 f5       	brne	.+64     	; 0x11cc <DcMotor_Rotate+0x74>
	{
	case STOP :
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	66 e0       	ldi	r22, 0x06	; 6
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	67 e0       	ldi	r22, 0x07	; 7
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    11a0:	15 c0       	rjmp	.+42     	; 0x11cc <DcMotor_Rotate+0x74>
		break;
	case CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_LOW);
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	66 e0       	ldi	r22, 0x06	; 6
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	67 e0       	ldi	r22, 0x07	; 7
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    11b6:	0a c0       	rjmp	.+20     	; 0x11cc <DcMotor_Rotate+0x74>
		break;
	case A_CLOCKWISE :
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	66 e0       	ldi	r22, 0x06	; 6
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_PIN_ID, LOGIC_LOW);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	67 e0       	ldi	r22, 0x07	; 7
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
		break;
	}
	/*PWM_Timer0_Start(speed);*/
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <EEPROM_writeByte+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <EEPROM_writeByte+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ea:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11ee:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	11 f0       	breq	.+4      	; 0x11fa <EEPROM_writeByte+0x22>
        return ERROR;
    11f6:	1c 82       	std	Y+4, r1	; 0x04
    11f8:	28 c0       	rjmp	.+80     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	80 70       	andi	r24, 0x00	; 0
    1200:	97 70       	andi	r25, 0x07	; 7
    1202:	88 0f       	add	r24, r24
    1204:	89 2f       	mov	r24, r25
    1206:	88 1f       	adc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	91 95       	neg	r25
    120c:	80 6a       	ori	r24, 0xA0	; 160
    120e:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1212:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    1216:	88 31       	cpi	r24, 0x18	; 24
    1218:	11 f0       	breq	.+4      	; 0x121e <EEPROM_writeByte+0x46>
        return ERROR; 
    121a:	1c 82       	std	Y+4, r1	; 0x04
    121c:	16 c0       	rjmp	.+44     	; 0x124a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1224:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    1228:	88 32       	cpi	r24, 0x28	; 40
    122a:	11 f0       	breq	.+4      	; 0x1230 <EEPROM_writeByte+0x58>
        return ERROR;
    122c:	1c 82       	std	Y+4, r1	; 0x04
    122e:	0d c0       	rjmp	.+26     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1236:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    123a:	88 32       	cpi	r24, 0x28	; 40
    123c:	11 f0       	breq	.+4      	; 0x1242 <EEPROM_writeByte+0x6a>
        return ERROR;
    123e:	1c 82       	std	Y+4, r1	; 0x04
    1240:	04 c0       	rjmp	.+8      	; 0x124a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1242:	0e 94 8b 12 	call	0x2516	; 0x2516 <TWI_stop>
	
    return SUCCESS;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8c 83       	std	Y+4, r24	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <EEPROM_readByte+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <EEPROM_readByte+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	7c 83       	std	Y+4, r23	; 0x04
    126e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1270:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1274:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	11 f0       	breq	.+4      	; 0x1280 <EEPROM_readByte+0x26>
        return ERROR;
    127c:	1d 82       	std	Y+5, r1	; 0x05
    127e:	44 c0       	rjmp	.+136    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	80 70       	andi	r24, 0x00	; 0
    1286:	97 70       	andi	r25, 0x07	; 7
    1288:	88 0f       	add	r24, r24
    128a:	89 2f       	mov	r24, r25
    128c:	88 1f       	adc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	91 95       	neg	r25
    1292:	80 6a       	ori	r24, 0xA0	; 160
    1294:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1298:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    129c:	88 31       	cpi	r24, 0x18	; 24
    129e:	11 f0       	breq	.+4      	; 0x12a4 <EEPROM_readByte+0x4a>
        return ERROR;
    12a0:	1d 82       	std	Y+5, r1	; 0x05
    12a2:	32 c0       	rjmp	.+100    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12aa:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    12ae:	88 32       	cpi	r24, 0x28	; 40
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <EEPROM_readByte+0x5c>
        return ERROR;
    12b2:	1d 82       	std	Y+5, r1	; 0x05
    12b4:	29 c0       	rjmp	.+82     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12b6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12ba:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <EEPROM_readByte+0x6c>
        return ERROR;
    12c2:	1d 82       	std	Y+5, r1	; 0x05
    12c4:	21 c0       	rjmp	.+66     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	80 70       	andi	r24, 0x00	; 0
    12cc:	97 70       	andi	r25, 0x07	; 7
    12ce:	88 0f       	add	r24, r24
    12d0:	89 2f       	mov	r24, r25
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	91 95       	neg	r25
    12d8:	81 6a       	ori	r24, 0xA1	; 161
    12da:	0e 94 96 12 	call	0x252c	; 0x252c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12de:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    12e2:	80 34       	cpi	r24, 0x40	; 64
    12e4:	11 f0       	breq	.+4      	; 0x12ea <EEPROM_readByte+0x90>
        return ERROR;
    12e6:	1d 82       	std	Y+5, r1	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12ea:	0e 94 c0 12 	call	0x2580	; 0x2580 <TWI_readByteWithNACK>
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12f4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <TWI_getStatus>
    12f8:	88 35       	cpi	r24, 0x58	; 88
    12fa:	11 f0       	breq	.+4      	; 0x1300 <EEPROM_readByte+0xa6>
        return ERROR;
    12fc:	1d 82       	std	Y+5, r1	; 0x05
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1300:	0e 94 8b 12 	call	0x2516	; 0x2516 <TWI_stop>

    return SUCCESS;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <GPIO_setupPinDirection>:

/* Description :
 * this function used to setup the direction of the required pin
 * if the pin or port number is not correct, the function will do nothing
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_setupPinDirection+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_setupPinDirection+0x8>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	6a 83       	std	Y+2, r22	; 0x02
    132c:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT)){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	08 f0       	brcs	.+2      	; 0x1336 <GPIO_setupPinDirection+0x1c>
    1334:	d5 c0       	rjmp	.+426    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <GPIO_setupPinDirection+0x24>
    133c:	d1 c0       	rjmp	.+418    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		/*do nothing because the pin number or the port number is not correct */
	}
	else
	{
		/*setup pin direction*/
		switch(port_num){
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3d 83       	std	Y+5, r19	; 0x05
    1346:	2c 83       	std	Y+4, r18	; 0x04
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <GPIO_setupPinDirection+0x3a>
    1352:	43 c0       	rjmp	.+134    	; 0x13da <GPIO_setupPinDirection+0xc0>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <GPIO_setupPinDirection+0x4e>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <GPIO_setupPinDirection+0x68>
    1366:	bc c0       	rjmp	.+376    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x5a>
    1372:	5f c0       	rjmp	.+190    	; 0x1432 <GPIO_setupPinDirection+0x118>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_setupPinDirection+0x66>
    137e:	85 c0       	rjmp	.+266    	; 0x148a <GPIO_setupPinDirection+0x170>
    1380:	af c0       	rjmp	.+350    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID :
			if (direction == PIN_OUTPUT)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_setupPinDirection+0x8c>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_setupPinDirection+0x88>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	98 c0       	rjmp	.+304    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13b0:	aa e3       	ldi	r26, 0x3A	; 58
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_setupPinDirection+0xb4>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_setupPinDirection+0xb0>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	83 c0       	rjmp	.+262    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break ;
		case PORTB_ID :
			if (direction == PIN_OUTPUT)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_setupPinDirection+0xe4>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_setupPinDirection+0xe0>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	6c c0       	rjmp	.+216    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1408:	a7 e3       	ldi	r26, 0x37	; 55
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_setupPinDirection+0x10c>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_setupPinDirection+0x108>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	57 c0       	rjmp	.+174    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break ;
		case PORTC_ID :
			if (direction == PIN_OUTPUT)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1438:	a4 e3       	ldi	r26, 0x34	; 52
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e4 e3       	ldi	r30, 0x34	; 52
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_setupPinDirection+0x13c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_setupPinDirection+0x138>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	40 c0       	rjmp	.+128    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1460:	a4 e3       	ldi	r26, 0x34	; 52
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_setupPinDirection+0x164>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_setupPinDirection+0x160>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	2b c0       	rjmp	.+86     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break ;
		case PORTD_ID :
			if (direction == PIN_OUTPUT)
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	a1 f4       	brne	.+40     	; 0x14b8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1490:	a1 e3       	ldi	r26, 0x31	; 49
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_setupPinDirection+0x194>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_setupPinDirection+0x190>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <GPIO_setupPinDirection+0x1bc>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <GPIO_setupPinDirection+0x1b8>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
			break ;
		}

	}

}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_writePin>:
 * this function is used to write value to the required pin
 * write the value logic high or low
 * if this pin is input , this function will enable/disable the internal pull-up resistor
 * if the pin or port number is not correct, the function will do nothing
 * */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_writePin+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_writePin+0x8>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
    1502:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT)){
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	08 f0       	brcs	.+2      	; 0x150c <GPIO_writePin+0x1c>
    150a:	d5 c0       	rjmp	.+426    	; 0x16b6 <GPIO_writePin+0x1c6>
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	08 f0       	brcs	.+2      	; 0x1514 <GPIO_writePin+0x24>
    1512:	d1 c0       	rjmp	.+418    	; 0x16b6 <GPIO_writePin+0x1c6>
		/*do nothing because the pin number or the port number is not correct */
	}
	else
	{
		/* write value in the required pin */
		switch(port_num)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <GPIO_writePin+0x3a>
    1528:	43 c0       	rjmp	.+134    	; 0x15b0 <GPIO_writePin+0xc0>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	2c f4       	brge	.+10     	; 0x153e <GPIO_writePin+0x4e>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	71 f0       	breq	.+28     	; 0x1558 <GPIO_writePin+0x68>
    153c:	bc c0       	rjmp	.+376    	; 0x16b6 <GPIO_writePin+0x1c6>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x5a>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <GPIO_writePin+0x118>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <GPIO_writePin+0x66>
    1554:	85 c0       	rjmp	.+266    	; 0x1660 <GPIO_writePin+0x170>
    1556:	af c0       	rjmp	.+350    	; 0x16b6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if (value == LOGIC_HIGH)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_writePin+0x8c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_writePin+0x88>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	98 c0       	rjmp	.+304    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1586:	ab e3       	ldi	r26, 0x3B	; 59
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_writePin+0xb4>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_writePin+0xb0>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	83 c0       	rjmp	.+262    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break ;
		case PORTB_ID :
			if (value == LOGIC_HIGH)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15b6:	a8 e3       	ldi	r26, 0x38	; 56
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_writePin+0xe4>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_writePin+0xe0>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	6c c0       	rjmp	.+216    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15de:	a8 e3       	ldi	r26, 0x38	; 56
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e8 e3       	ldi	r30, 0x38	; 56
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_writePin+0x10c>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_writePin+0x108>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break ;
		case PORTC_ID :
			if (value == LOGIC_HIGH)
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	a1 f4       	brne	.+40     	; 0x1636 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    160e:	a5 e3       	ldi	r26, 0x35	; 53
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e3       	ldi	r30, 0x35	; 53
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_writePin+0x13c>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_writePin+0x138>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	40 c0       	rjmp	.+128    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_writePin+0x164>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_writePin+0x160>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	2b c0       	rjmp	.+86     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break ;
		case PORTD_ID :
			if (value == LOGIC_HIGH)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a1 f4       	brne	.+40     	; 0x168e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1666:	a2 e3       	ldi	r26, 0x32	; 50
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_writePin+0x194>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_writePin+0x190>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <GPIO_writePin+0x1bc>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <GPIO_writePin+0x1b8>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24

		}

	}

}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <GPIO_readPin>:
/* Description :
 * this function used to setup the direction of the required port
 * if the port number is not correct, the function will do nothing
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_readPin+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <GPIO_readPin+0x8>
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	6b 83       	std	Y+3, r22	; 0x03

	uint8 returned_value= LOGIC_LOW;
    16d8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT)){
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <GPIO_readPin+0x1c>
    16e0:	84 c0       	rjmp	.+264    	; 0x17ea <GPIO_readPin+0x124>
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_readPin+0x24>
    16e8:	80 c0       	rjmp	.+256    	; 0x17ea <GPIO_readPin+0x124>
		/*do nothing because the pin number or the port number is not correct */
	}
	else{
		/* read value from the required pin */
		switch(port_num){
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3d 83       	std	Y+5, r19	; 0x05
    16f2:	2c 83       	std	Y+4, r18	; 0x04
    16f4:	4c 81       	ldd	r20, Y+4	; 0x04
    16f6:	5d 81       	ldd	r21, Y+5	; 0x05
    16f8:	41 30       	cpi	r20, 0x01	; 1
    16fa:	51 05       	cpc	r21, r1
    16fc:	79 f1       	breq	.+94     	; 0x175c <GPIO_readPin+0x96>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	91 05       	cpc	r25, r1
    1706:	34 f4       	brge	.+12     	; 0x1714 <GPIO_readPin+0x4e>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	21 15       	cp	r18, r1
    170e:	31 05       	cpc	r19, r1
    1710:	69 f0       	breq	.+26     	; 0x172c <GPIO_readPin+0x66>
    1712:	6b c0       	rjmp	.+214    	; 0x17ea <GPIO_readPin+0x124>
    1714:	4c 81       	ldd	r20, Y+4	; 0x04
    1716:	5d 81       	ldd	r21, Y+5	; 0x05
    1718:	42 30       	cpi	r20, 0x02	; 2
    171a:	51 05       	cpc	r21, r1
    171c:	b9 f1       	breq	.+110    	; 0x178c <GPIO_readPin+0xc6>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <GPIO_readPin+0x64>
    1728:	49 c0       	rjmp	.+146    	; 0x17bc <GPIO_readPin+0xf6>
    172a:	5f c0       	rjmp	.+190    	; 0x17ea <GPIO_readPin+0x124>
		case PORTA_ID :
			if (BIT_IS_SET(PINA,pin_num))
    172c:	e9 e3       	ldi	r30, 0x39	; 57
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_readPin+0x7e>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_readPin+0x7a>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	88 23       	and	r24, r24
    1750:	19 f0       	breq	.+6      	; 0x1758 <GPIO_readPin+0x92>
			{
				returned_value= LOGIC_HIGH;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	49 c0       	rjmp	.+146    	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				returned_value= LOGIC_LOW;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	47 c0       	rjmp	.+142    	; 0x17ea <GPIO_readPin+0x124>
			}
			break ;
		case PORTB_ID :
			if (BIT_IS_SET(PINB,pin_num))
    175c:	e6 e3       	ldi	r30, 0x36	; 54
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_readPin+0xae>
    1770:	55 95       	asr	r21
    1772:	47 95       	ror	r20
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_readPin+0xaa>
    1778:	ca 01       	movw	r24, r20
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	88 23       	and	r24, r24
    1780:	19 f0       	breq	.+6      	; 0x1788 <GPIO_readPin+0xc2>
			{
				returned_value= LOGIC_HIGH;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	31 c0       	rjmp	.+98     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				returned_value= LOGIC_LOW;
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	2f c0       	rjmp	.+94     	; 0x17ea <GPIO_readPin+0x124>
			}
			break ;
		case PORTC_ID :
			if (BIT_IS_SET(PINC,pin_num))
    178c:	e3 e3       	ldi	r30, 0x33	; 51
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_readPin+0xde>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_readPin+0xda>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	88 23       	and	r24, r24
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <GPIO_readPin+0xf2>
			{
				returned_value= LOGIC_HIGH;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	19 c0       	rjmp	.+50     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				returned_value= LOGIC_LOW;
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	17 c0       	rjmp	.+46     	; 0x17ea <GPIO_readPin+0x124>
			}
			break ;
		case PORTD_ID :
			if (BIT_IS_SET(PIND,pin_num))
    17bc:	e0 e3       	ldi	r30, 0x30	; 48
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <GPIO_readPin+0x10e>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <GPIO_readPin+0x10a>
    17d8:	ca 01       	movw	r24, r20
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	88 23       	and	r24, r24
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <GPIO_readPin+0x122>
			{
				returned_value= LOGIC_HIGH;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				returned_value= LOGIC_LOW;
    17e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break ;
		}

	}
	return returned_value ;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <GPIO_setupPortDirection>:

/* Description :
 * this function used to setup the direction of the required port
 * if the port number is not correct, the function will do nothing
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPortDirection+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPortDirection+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS){
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	90 f5       	brcc	.+100    	; 0x1876 <GPIO_setupPortDirection+0x7a>
		/*do nothing because the pin number or the port number is not correct */
	}
	else
	{
		/*setup port direction*/
		switch(port_num){
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3c 83       	std	Y+4, r19	; 0x04
    181a:	2b 83       	std	Y+3, r18	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	d1 f0       	breq	.+52     	; 0x185a <GPIO_setupPortDirection+0x5e>
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <GPIO_setupPortDirection+0x3e>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <GPIO_setupPortDirection+0x54>
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <GPIO_setupPortDirection+0x7a>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <GPIO_setupPortDirection+0x68>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	81 f0       	breq	.+32     	; 0x186e <GPIO_setupPortDirection+0x72>
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID :
			DDRA= direction;
    1850:	ea e3       	ldi	r30, 0x3A	; 58
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break ;
		case PORTB_ID :
			DDRB= direction;
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 83       	st	Z, r24
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break ;
		case PORTC_ID :
			DDRC= direction;
    1864:	e4 e3       	ldi	r30, 0x34	; 52
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break ;
		case PORTD_ID :
			DDRD= direction;
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
			break ;
		}

	}

}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_writePort>:
 * this function used to write value of the required port
 * if this port is input , this function will enable/disable the internal pull-up resistor
 * if the port number is not correct, the function will do nothing
 */

void GPIO_writePort(uint8 port_num, uint8 value){
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_writePort+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_writePort+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	90 f5       	brcc	.+100    	; 0x18fe <GPIO_writePort+0x7a>
		/*do nothing because the pin number or the port number is not correct */
	}
	else{
		/*write port direction*/
		switch(port_num){
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <GPIO_writePort+0x5e>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <GPIO_writePort+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <GPIO_writePort+0x54>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <GPIO_writePort+0x7a>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <GPIO_writePort+0x68>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <GPIO_writePort+0x72>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GPIO_writePort+0x7a>
		case PORTA_ID :
			PORTA = value;
    18d8:	eb e3       	ldi	r30, 0x3B	; 59
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GPIO_writePort+0x7a>
			break ;
		case PORTB_ID :
			PORTB = value;
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GPIO_writePort+0x7a>
			break ;
		case PORTC_ID :
			PORTC = value;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GPIO_writePort+0x7a>
			break ;
		case PORTD_ID :
			PORTD = value;
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
			break ;
		}

	}

}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <GPIO_readPort>:
 * this function used to read value of the required port
 * it return logic high or low
 * if this port is input , this function will enable/disable the internal pull-up resistor
 * if the port number is not correct, the function will do nothing
 */
uint8 GPIO_readPort(uint8 port_num){
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_readPort+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_readPort+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02

	uint8 returned_value =LOGIC_LOW ;
    191a:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS){
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	90 f5       	brcc	.+100    	; 0x1986 <GPIO_readPort+0x7a>
		/*do nothing because the pin number or the port number is not correct */
	}
	else{
		/*write port direction*/
		switch(port_num){
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <GPIO_readPort+0x5e>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <GPIO_readPort+0x3e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <GPIO_readPort+0x54>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <GPIO_readPort+0x7a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_readPort+0x68>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_readPort+0x72>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <GPIO_readPort+0x7a>
		case PORTA_ID :
			returned_value =PINA ;
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <GPIO_readPort+0x7a>
			break ;
		case PORTB_ID :
			returned_value =PINB ;
    196a:	e6 e3       	ldi	r30, 0x36	; 54
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <GPIO_readPort+0x7a>
			break ;
		case PORTC_ID :
			returned_value =PINC;
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <GPIO_readPort+0x7a>
			break ;
		case PORTD_ID :
			returned_value =PIND ;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
			break ;
		}

	}
	return returned_value;
    1986:	89 81       	ldd	r24, Y+1	; 0x01


}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <LCD_init>:
 * ***********      Functions Definitions         ************************/
/* Description:
 * initialization function
 * set RS , RW , E and data port as output pins
 * */
void LCD_init(void){
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	62 e0       	ldi	r22, 0x02	; 2
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	6f ef       	ldi	r22, 0xFF	; 255
    19c0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    19c4:	88 e3       	ldi	r24, 0x38	; 56
    19c6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_sendCommand>
#endif	  /* 2lines- 8bits data*/
	LCD_sendCommand(LCD_CURSOR_OFF);        /* cursor off */
    19ca:	8c e0       	ldi	r24, 0x0C	; 12
    19cc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);        /* clear the screen*/
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_sendCommand>


}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <LCD_sendCommand>:

/* Description:
 * this function used to send a command
 * */
void LCD_sendCommand(uint8 command){
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	ea 97       	sbiw	r28, 0x3a	; 58
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    19f2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* RS = 0 */
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	62 e0       	ldi	r22, 0x02	; 2
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* R/W = 0*/
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	8d ab       	std	Y+53, r24	; 0x35
    1a12:	9e ab       	std	Y+54, r25	; 0x36
    1a14:	af ab       	std	Y+55, r26	; 0x37
    1a16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	53 e4       	ldi	r21, 0x43	; 67
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	89 ab       	std	Y+49, r24	; 0x31
    1a32:	9a ab       	std	Y+50, r25	; 0x32
    1a34:	ab ab       	std	Y+51, r26	; 0x33
    1a36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_sendCommand+0x7e>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	98 ab       	std	Y+48, r25	; 0x30
    1a56:	8f a7       	std	Y+47, r24	; 0x2f
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6d a9       	ldd	r22, Y+53	; 0x35
    1a74:	7e a9       	ldd	r23, Y+54	; 0x36
    1a76:	8f a9       	ldd	r24, Y+55	; 0x37
    1a78:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	98 ab       	std	Y+48, r25	; 0x30
    1a98:	8f a7       	std	Y+47, r24	; 0x2f
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_sendCommand+0xde>
    1a9c:	89 e1       	ldi	r24, 0x19	; 25
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9e a7       	std	Y+46, r25	; 0x2e
    1aa2:	8d a7       	std	Y+45, r24	; 0x2d
    1aa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_sendCommand+0xcc>
    1aac:	9e a7       	std	Y+46, r25	; 0x2e
    1aae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abc:	98 a9       	ldd	r25, Y+48	; 0x30
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_sendCommand+0xc0>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aca:	9c a9       	ldd	r25, Y+52	; 0x34
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	98 ab       	std	Y+48, r25	; 0x30
    1ad6:	8f a7       	std	Y+47, r24	; 0x2f
    1ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ada:	98 a9       	ldd	r25, Y+48	; 0x30
    1adc:	9c a7       	std	Y+44, r25	; 0x2c
    1ade:	8b a7       	std	Y+43, r24	; 0x2b
    1ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_sendCommand+0x108>
    1ae8:	9c a7       	std	Y+44, r25	; 0x2c
    1aea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                            /* for tas = 50ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Data enable E=0 */
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	a0 e8       	ldi	r26, 0x80	; 128
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	8f a3       	std	Y+39, r24	; 0x27
    1b00:	98 a7       	std	Y+40, r25	; 0x28
    1b02:	a9 a7       	std	Y+41, r26	; 0x29
    1b04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b06:	6f a1       	ldd	r22, Y+39	; 0x27
    1b08:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8b a3       	std	Y+35, r24	; 0x23
    1b20:	9c a3       	std	Y+36, r25	; 0x24
    1b22:	ad a3       	std	Y+37, r26	; 0x25
    1b24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b26:	6b a1       	ldd	r22, Y+35	; 0x23
    1b28:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9a a3       	std	Y+34, r25	; 0x22
    1b44:	89 a3       	std	Y+33, r24	; 0x21
    1b46:	3f c0       	rjmp	.+126    	; 0x1bc6 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1b48:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	3f ef       	ldi	r19, 0xFF	; 255
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	57 e4       	ldi	r21, 0x47	; 71
    1b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	4c f5       	brge	.+82     	; 0x1bb2 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b60:	6f a1       	ldd	r22, Y+39	; 0x27
    1b62:	78 a5       	ldd	r23, Y+40	; 0x28
    1b64:	89 a5       	ldd	r24, Y+41	; 0x29
    1b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e2       	ldi	r20, 0x20	; 32
    1b6e:	51 e4       	ldi	r21, 0x41	; 65
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9a a3       	std	Y+34, r25	; 0x22
    1b86:	89 a3       	std	Y+33, r24	; 0x21
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_sendCommand+0x1cc>
    1b8a:	89 e1       	ldi	r24, 0x19	; 25
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	98 a3       	std	Y+32, r25	; 0x20
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
    1b92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b94:	98 a1       	ldd	r25, Y+32	; 0x20
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_sendCommand+0x1ba>
    1b9a:	98 a3       	std	Y+32, r25	; 0x20
    1b9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	9a a3       	std	Y+34, r25	; 0x22
    1ba6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f7       	brne	.-38     	; 0x1b8a <LCD_sendCommand+0x1ae>
    1bb0:	14 c0       	rjmp	.+40     	; 0x1bda <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9a a3       	std	Y+34, r25	; 0x22
    1bc4:	89 a3       	std	Y+33, r24	; 0x21
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	9e 8f       	std	Y+30, r25	; 0x1e
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD_sendCommand+0x1f6>
    1bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	6a ad       	ldd	r22, Y+58	; 0x3a
    1bde:	0e 94 42 0c 	call	0x1884	; 0x1884 <GPIO_writePort>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e8       	ldi	r26, 0x80	; 128
    1be8:	bf e3       	ldi	r27, 0x3F	; 63
    1bea:	89 8f       	std	Y+25, r24	; 0x19
    1bec:	9a 8f       	std	Y+26, r25	; 0x1a
    1bee:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	4a e7       	ldi	r20, 0x7A	; 122
    1c00:	53 e4       	ldi	r21, 0x43	; 67
    1c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8d 8b       	std	Y+21, r24	; 0x15
    1c0c:	9e 8b       	std	Y+22, r25	; 0x16
    1c0e:	af 8b       	std	Y+23, r26	; 0x17
    1c10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <LCD_sendCommand+0x258>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 8b       	std	Y+20, r25	; 0x14
    1c72:	8b 8b       	std	Y+19, r24	; 0x13
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <LCD_sendCommand+0x2b8>
    1c76:	89 e1       	ldi	r24, 0x19	; 25
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
    1c7e:	89 89       	ldd	r24, Y+17	; 0x11
    1c80:	9a 89       	ldd	r25, Y+18	; 0x12
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_sendCommand+0x2a6>
    1c86:	9a 8b       	std	Y+18, r25	; 0x12
    1c88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9c 8b       	std	Y+20, r25	; 0x14
    1c92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <LCD_sendCommand+0x29a>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	98 89       	ldd	r25, Y+16	; 0x10
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_sendCommand+0x2e2>
    1cc2:	98 8b       	std	Y+16, r25	; 0x10
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e8       	ldi	r26, 0x80	; 128
    1cd6:	bf e3       	ldi	r27, 0x3F	; 63
    1cd8:	8b 87       	std	Y+11, r24	; 0x0b
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	ad 87       	std	Y+13, r26	; 0x0d
    1cde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8f 83       	std	Y+7, r24	; 0x07
    1cfa:	98 87       	std	Y+8, r25	; 0x08
    1cfc:	a9 87       	std	Y+9, r26	; 0x09
    1cfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d00:	6f 81       	ldd	r22, Y+7	; 0x07
    1d02:	78 85       	ldd	r23, Y+8	; 0x08
    1d04:	89 85       	ldd	r24, Y+9	; 0x09
    1d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_sendCommand+0x346>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_sendCommand+0x3a6>
    1d64:	89 e1       	ldi	r24, 0x19	; 25
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c 83       	std	Y+4, r25	; 0x04
    1d6a:	8b 83       	std	Y+3, r24	; 0x03
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_sendCommand+0x394>
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_sendCommand+0x388>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_sendCommand+0x3d0>
    1db0:	9a 83       	std	Y+2, r25	; 0x02
    1db2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif


}
    1db4:	ea 96       	adiw	r28, 0x3a	; 58
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_displayCharacter>:

/* Description:
 * this function used to send a data
 * */
void LCD_displayCharacter(uint8 data){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	ea 97       	sbiw	r28, 0x3a	; 58
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1ddc:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* RS = 1 */
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* R/W = 0*/
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e8       	ldi	r26, 0x80	; 128
    1df8:	bf e3       	ldi	r27, 0x3F	; 63
    1dfa:	8d ab       	std	Y+53, r24	; 0x35
    1dfc:	9e ab       	std	Y+54, r25	; 0x36
    1dfe:	af ab       	std	Y+55, r26	; 0x37
    1e00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	6d a9       	ldd	r22, Y+53	; 0x35
    1e04:	7e a9       	ldd	r23, Y+54	; 0x36
    1e06:	8f a9       	ldd	r24, Y+55	; 0x37
    1e08:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	53 e4       	ldi	r21, 0x43	; 67
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	89 ab       	std	Y+49, r24	; 0x31
    1e1c:	9a ab       	std	Y+50, r25	; 0x32
    1e1e:	ab ab       	std	Y+51, r26	; 0x33
    1e20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e22:	69 a9       	ldd	r22, Y+49	; 0x31
    1e24:	7a a9       	ldd	r23, Y+50	; 0x32
    1e26:	8b a9       	ldd	r24, Y+51	; 0x33
    1e28:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	98 ab       	std	Y+48, r25	; 0x30
    1e40:	8f a7       	std	Y+47, r24	; 0x2f
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1e44:	69 a9       	ldd	r22, Y+49	; 0x31
    1e46:	7a a9       	ldd	r23, Y+50	; 0x32
    1e48:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e60:	8f a9       	ldd	r24, Y+55	; 0x37
    1e62:	98 ad       	ldd	r25, Y+56	; 0x38
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	98 ab       	std	Y+48, r25	; 0x30
    1e82:	8f a7       	std	Y+47, r24	; 0x2f
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <LCD_displayCharacter+0xde>
    1e86:	89 e1       	ldi	r24, 0x19	; 25
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
    1e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_displayCharacter+0xcc>
    1e96:	9e a7       	std	Y+46, r25	; 0x2e
    1e98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <LCD_displayCharacter+0xc0>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	98 ab       	std	Y+48, r25	; 0x30
    1ec0:	8f a7       	std	Y+47, r24	; 0x2f
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
    1eca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_displayCharacter+0x108>
    1ed2:	9c a7       	std	Y+44, r25	; 0x2c
    1ed4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);                                            /* for tas = 50ns*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);  /* Data enable E=0 */
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8f a3       	std	Y+39, r24	; 0x27
    1eea:	98 a7       	std	Y+40, r25	; 0x28
    1eec:	a9 a7       	std	Y+41, r26	; 0x29
    1eee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	53 e4       	ldi	r21, 0x43	; 67
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8b a3       	std	Y+35, r24	; 0x23
    1f0a:	9c a3       	std	Y+36, r25	; 0x24
    1f0c:	ad a3       	std	Y+37, r26	; 0x25
    1f0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1f32:	6b a1       	ldd	r22, Y+35	; 0x23
    1f34:	7c a1       	ldd	r23, Y+36	; 0x24
    1f36:	8d a1       	ldd	r24, Y+37	; 0x25
    1f38:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_displayCharacter+0x1cc>
    1f74:	89 e1       	ldi	r24, 0x19	; 25
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	98 a3       	std	Y+32, r25	; 0x20
    1f7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_displayCharacter+0x1ba>
    1f84:	98 a3       	std	Y+32, r25	; 0x20
    1f86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_displayCharacter+0x1ae>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_displayCharacter+0x1f6>
    1fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	6a ad       	ldd	r22, Y+58	; 0x3a
    1fc8:	0e 94 42 0c 	call	0x1884	; 0x1884 <GPIO_writePort>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	53 e4       	ldi	r21, 0x43	; 67
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d 8b       	std	Y+21, r24	; 0x15
    1ff6:	9e 8b       	std	Y+22, r25	; 0x16
    1ff8:	af 8b       	std	Y+23, r26	; 0x17
    1ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_displayCharacter+0x258>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_displayCharacter+0x2b8>
    2060:	89 e1       	ldi	r24, 0x19	; 25
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	89 89       	ldd	r24, Y+17	; 0x11
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_displayCharacter+0x2a6>
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_displayCharacter+0x29a>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_displayCharacter+0x2e2>
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);                                          /* delay for  Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);   /* Disable LCD E=0 */
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	8b 87       	std	Y+11, r24	; 0x0b
    20c4:	9c 87       	std	Y+12, r25	; 0x0c
    20c6:	ad 87       	std	Y+13, r26	; 0x0d
    20c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	53 e4       	ldi	r21, 0x43	; 67
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8f 83       	std	Y+7, r24	; 0x07
    20e4:	98 87       	std	Y+8, r25	; 0x08
    20e6:	a9 87       	std	Y+9, r26	; 0x09
    20e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <LCD_displayCharacter+0x346>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	3f c0       	rjmp	.+126    	; 0x218a <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_displayCharacter+0x3a6>
    214e:	89 e1       	ldi	r24, 0x19	; 25
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayCharacter+0x394>
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <LCD_displayCharacter+0x388>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6f 81       	ldd	r22, Y+7	; 0x07
    2178:	78 85       	ldd	r23, Y+8	; 0x08
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_displayCharacter+0x3d0>
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);                                          /* delay for Th = 13ns */
#endif


}
    219e:	ea 96       	adiw	r28, 0x3a	; 58
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <LCD_moveCursor>:

/* Description:
 * this function used to move the cursor to specific row and column
 * */
void LCD_moveCursor(uint8 row , uint8 column){
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_moveCursor+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <LCD_moveCursor+0x8>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;

	switch(row)
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3d 83       	std	Y+5, r19	; 0x05
    21ca:	2c 83       	std	Y+4, r18	; 0x04
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	9d 81       	ldd	r25, Y+5	; 0x05
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	c1 f0       	breq	.+48     	; 0x2206 <LCD_moveCursor+0x56>
    21d6:	2c 81       	ldd	r18, Y+4	; 0x04
    21d8:	3d 81       	ldd	r19, Y+5	; 0x05
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <LCD_moveCursor+0x3a>
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 f0       	breq	.+24     	; 0x2200 <LCD_moveCursor+0x50>
    21e8:	19 c0       	rjmp	.+50     	; 0x221c <LCD_moveCursor+0x6c>
    21ea:	2c 81       	ldd	r18, Y+4	; 0x04
    21ec:	3d 81       	ldd	r19, Y+5	; 0x05
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	69 f0       	breq	.+26     	; 0x220e <LCD_moveCursor+0x5e>
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	61 f0       	breq	.+24     	; 0x2216 <LCD_moveCursor+0x66>
    21fe:	0e c0       	rjmp	.+28     	; 0x221c <LCD_moveCursor+0x6c>
	{
	case 0 :
		address= column ;
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	0b c0       	rjmp	.+22     	; 0x221c <LCD_moveCursor+0x6c>
		break;
	case 1 :
		address= 0x40 + column ;
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	80 5c       	subi	r24, 0xC0	; 192
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	07 c0       	rjmp	.+14     	; 0x221c <LCD_moveCursor+0x6c>
		break;
	case 2 :
		address= 0x10 + column ;
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	80 5f       	subi	r24, 0xF0	; 240
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	03 c0       	rjmp	.+6      	; 0x221c <LCD_moveCursor+0x6c>
		break;
	case 3 :
		address= 0x50 + column ;
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	80 5b       	subi	r24, 0xB0	; 176
    221a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | address);
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	80 68       	ori	r24, 0x80	; 128
    2220:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_sendCommand>

}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <LCD_clearScreen>:

/* Description:
 * this function used to clear the  of LCD
 * */
void LCD_clearScreen(void){
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);        /* clear the screen*/
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_sendCommand>

}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <LCD_displayString>:

/*Description
 * this function used to display a string on the screen of the LCD
 * */
void LCD_displayString(const char *str){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <LCD_displayString+0x6>
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	9b 83       	std	Y+3, r25	; 0x03
    2256:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	80 81       	ld	r24, Z
    226e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_displayCharacter>
		i++;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	89 83       	std	Y+1, r24	; 0x01
/*Description
 * this function used to display a string on the screen of the LCD
 * */
void LCD_displayString(const char *str){
	uint8 i = 0 ;
	while(str[i] != '\0')
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	fc 01       	movw	r30, r24
    2284:	e2 0f       	add	r30, r18
    2286:	f3 1f       	adc	r31, r19
    2288:	80 81       	ld	r24, Z
    228a:	88 23       	and	r24, r24
    228c:	39 f7       	brne	.-50     	; 0x225c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the string in the required position on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <LCD_displayStringRowColumn+0x6>
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <LCD_displayStringRowColumn+0x8>
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	6a 83       	std	Y+2, r22	; 0x02
    22aa:	5c 83       	std	Y+4, r21	; 0x04
    22ac:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col); /* go to to the required LCD position */
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	6a 81       	ldd	r22, Y+2	; 0x02
    22b2:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	62 97       	sbiw	r28, 0x12	; 18
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	9a 8b       	std	Y+18, r25	; 0x12
    22e2:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]; /* String to hold the ascii result */
	itoa(data,buffer,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22e4:	89 89       	ldd	r24, Y+17	; 0x11
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	9e 01       	movw	r18, r28
    22ea:	2f 5f       	subi	r18, 0xFF	; 255
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	b9 01       	movw	r22, r18
    22f0:	4a e0       	ldi	r20, 0x0A	; 10
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 64 14 	call	0x28c8	; 0x28c8 <itoa>
	LCD_displayString(buffer); /* Display the string */
    22f8:	ce 01       	movw	r24, r28
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_displayString>
}
    2300:	62 96       	adiw	r28, 0x12	; 18
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <__vector_9>:
/*******************************************************************************
 ***********            Interrupt Service Routines        *********************/


ISR(TIMER0_OVF_vect)
{
    2312:	1f 92       	push	r1
    2314:	0f 92       	push	r0
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	0f 92       	push	r0
    231a:	11 24       	eor	r1, r1
    231c:	2f 93       	push	r18
    231e:	3f 93       	push	r19
    2320:	4f 93       	push	r20
    2322:	5f 93       	push	r21
    2324:	6f 93       	push	r22
    2326:	7f 93       	push	r23
    2328:	8f 93       	push	r24
    232a:	9f 93       	push	r25
    232c:	af 93       	push	r26
    232e:	bf 93       	push	r27
    2330:	ef 93       	push	r30
    2332:	ff 93       	push	r31
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    233c:	80 91 78 00 	lds	r24, 0x0078
    2340:	90 91 79 00 	lds	r25, 0x0079
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	29 f0       	breq	.+10     	; 0x2352 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after
		 the Timer0 overflow Interrupt occur */
		(*g_callBackPtr)();
    2348:	e0 91 78 00 	lds	r30, 0x0078
    234c:	f0 91 79 00 	lds	r31, 0x0079
    2350:	09 95       	icall
	}
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	ff 91       	pop	r31
    2358:	ef 91       	pop	r30
    235a:	bf 91       	pop	r27
    235c:	af 91       	pop	r26
    235e:	9f 91       	pop	r25
    2360:	8f 91       	pop	r24
    2362:	7f 91       	pop	r23
    2364:	6f 91       	pop	r22
    2366:	5f 91       	pop	r21
    2368:	4f 91       	pop	r20
    236a:	3f 91       	pop	r19
    236c:	2f 91       	pop	r18
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    23a2:	80 91 78 00 	lds	r24, 0x0078
    23a6:	90 91 79 00 	lds	r25, 0x0079
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	29 f0       	breq	.+10     	; 0x23b8 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after
		 the Timer0 Compare Match Interrupt occur */
		(*g_callBackPtr)();
    23ae:	e0 91 78 00 	lds	r30, 0x0078
    23b2:	f0 91 79 00 	lds	r31, 0x0079
    23b6:	09 95       	icall
	}
}
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <TIMER0_init>:
 * 			Setup Timer Mode
 * 			Setup Pre-scaler
 *          setup Compare value
 *          setup Timer initial value.
 */
void TIMER0_init(TIMER0_ConfigerType *config_ptr){
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <TIMER0_init+0x6>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |= (1<<FOC0);                                     /* It's activated in Non-PWM Mode */
    23ec:	a3 e5       	ldi	r26, 0x53	; 83
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e3 e5       	ldi	r30, 0x53	; 83
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	8c 93       	st	X, r24

	TCCR0 =  ((config_ptr->mode)<<WGM01) | (TCCR0 & 0xB7);  /* WGM00 bit is zero in Normal and Compare Modes*/
    23fa:	a3 e5       	ldi	r26, 0x53	; 83
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	80 81       	ld	r24, Z
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	98 2f       	mov	r25, r24
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	87 7b       	andi	r24, 0xB7	; 183
    241e:	89 2b       	or	r24, r25
    2420:	8c 93       	st	X, r24
	                                                        /* WGM01 bit is zero in Normal Mode and 1 in Compare Mode */
	TCNT0 = (config_ptr->initial_value);                    /* initiate Timer0 value */
    2422:	a2 e5       	ldi	r26, 0x52	; 82
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	8c 93       	st	X, r24
	OCR0 = (config_ptr->comper_value);                      /* Timer0 Compare Match Value */
    242e:	ac e5       	ldi	r26, 0x5C	; 92
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e9 81       	ldd	r30, Y+1	; 0x01
    2434:	fa 81       	ldd	r31, Y+2	; 0x02
    2436:	83 81       	ldd	r24, Z+3	; 0x03
    2438:	8c 93       	st	X, r24
	TCCR0 = (config_ptr->prescale) | (TCCR0 & 0xf8);       	/* insert timer clock */
    243a:	a3 e5       	ldi	r26, 0x53	; 83
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	81 81       	ldd	r24, Z+1	; 0x01
    2444:	98 2f       	mov	r25, r24
    2446:	e3 e5       	ldi	r30, 0x53	; 83
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	88 7f       	andi	r24, 0xF8	; 248
    244e:	89 2b       	or	r24, r25
    2450:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0)|(1<<TOIE0);                         /* Enable overflow and Compare interrupts */
    2452:	a9 e5       	ldi	r26, 0x59	; 89
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e9 e5       	ldi	r30, 0x59	; 89
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	83 60       	ori	r24, 0x03	; 3
    245e:	8c 93       	st	X, r24
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <TIMER0_deInit>:


/* Description :
 * Function responsible for de-initialize for timer0
 */
void TIMER0_deInit(void){
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;                          /* Reset Timer0 Mode and Clock(Stop Counting) */
    2472:	e3 e5       	ldi	r30, 0x53	; 83
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	10 82       	st	Z, r1
	TCNT0 = 0;                          /* Reset Timer0 Register */
    2478:	e2 e5       	ldi	r30, 0x52	; 82
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	10 82       	st	Z, r1
	OCR0  = 0;                          /* Reset Timer0  Compare Register */
    247e:	ec e5       	ldi	r30, 0x5C	; 92
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	10 82       	st	Z, r1
	TIMSK &=~(1<<OCIE0);                /* Disabling Timer0 Overflow and Compare interrupts */
    2484:	a9 e5       	ldi	r26, 0x59	; 89
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e9 e5       	ldi	r30, 0x59	; 89
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8d 7f       	andi	r24, 0xFD	; 253
    2490:	8c 93       	st	X, r24
	TIMSK &=~(1<<TOIE0);
    2492:	a9 e5       	ldi	r26, 0x59	; 89
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e9 e5       	ldi	r30, 0x59	; 89
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8e 7f       	andi	r24, 0xFE	; 254
    249e:	8c 93       	st	X, r24
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <TIMER0_setCallBack>:


/* Description:
 	 Function to set the Call Back function address for timer0.
 */
void TIMER0_setCallBack(void(*a_ptr)(void)){
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <TIMER0_setCallBack+0x6>
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	90 93 79 00 	sts	0x0079, r25
    24bc:	80 93 78 00 	sts	0x0078, r24
}
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init()
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    24d2:	e0 e2       	ldi	r30, 0x20	; 32
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	80 83       	st	Z, r24
	TWSR = 0x00;
    24da:	e1 e2       	ldi	r30, 0x21	; 33
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (MY_ADDRESS<<1); // configure my address
    24e0:	e2 e2       	ldi	r30, 0x22	; 34
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    24e8:	e6 e5       	ldi	r30, 0x56	; 86
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	84 e0       	ldi	r24, 0x04	; 4
    24ee:	80 83       	st	Z, r24
}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <TWI_start>:

void TWI_start(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    24fe:	e6 e5       	ldi	r30, 0x56	; 86
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	84 ea       	ldi	r24, 0xA4	; 164
    2504:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2506:	e6 e5       	ldi	r30, 0x56	; 86
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	88 23       	and	r24, r24
    250e:	dc f7       	brge	.-10     	; 0x2506 <TWI_start+0x10>
}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <TWI_stop>:

void TWI_stop(void)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    251e:	e6 e5       	ldi	r30, 0x56	; 86
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	84 e9       	ldi	r24, 0x94	; 148
    2524:	80 83       	st	Z, r24
}
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	0f 92       	push	r0
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2538:	e3 e2       	ldi	r30, 0x23	; 35
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2540:	e6 e5       	ldi	r30, 0x56	; 86
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	84 e8       	ldi	r24, 0x84	; 132
    2546:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2548:	e6 e5       	ldi	r30, 0x56	; 86
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	dc f7       	brge	.-10     	; 0x2548 <TWI_writeByte+0x1c>
}
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2562:	e6 e5       	ldi	r30, 0x56	; 86
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	84 ec       	ldi	r24, 0xC4	; 196
    2568:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    256a:	e6 e5       	ldi	r30, 0x56	; 86
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	dc f7       	brge	.-10     	; 0x256a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2574:	e3 e2       	ldi	r30, 0x23	; 35
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
}
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2588:	e6 e5       	ldi	r30, 0x56	; 86
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	84 e8       	ldi	r24, 0x84	; 132
    258e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2590:	e6 e5       	ldi	r30, 0x56	; 86
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	88 23       	and	r24, r24
    2598:	dc f7       	brge	.-10     	; 0x2590 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    259a:	e3 e2       	ldi	r30, 0x23	; 35
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
}
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	0f 92       	push	r0
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    25b0:	e1 e2       	ldi	r30, 0x21	; 33
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	88 7f       	andi	r24, 0xF8	; 248
    25b8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <UART_init>:
 * 1. Set the Frame (data bits, parity and stop bits).
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigFrame *Config_Ptr)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <UART_init+0x6>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <UART_init+0x8>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    25d4:	1a 82       	std	Y+2, r1	; 0x02
    25d6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25d8:	eb e2       	ldi	r30, 0x2B	; 43
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    25e0:	ea e2       	ldi	r30, 0x2A	; 42
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	88 e1       	ldi	r24, 0x18	; 24
    25e6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    25e8:	e0 e4       	ldi	r30, 0x40	; 64
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 e8       	ldi	r24, 0x80	; 128
    25ee:	80 83       	st	Z, r24

	/*
	 * insert the required parity and stop_bit
	 */
	UCSRC= (UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    25f0:	a0 e4       	ldi	r26, 0x40	; 64
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e0 e4       	ldi	r30, 0x40	; 64
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	28 2f       	mov	r18, r24
    25fc:	2f 7c       	andi	r18, 0xCF	; 207
    25fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2600:	fc 81       	ldd	r31, Y+4	; 0x04
    2602:	81 81       	ldd	r24, Z+1	; 0x01
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	82 95       	swap	r24
    260a:	92 95       	swap	r25
    260c:	90 7f       	andi	r25, 0xF0	; 240
    260e:	98 27       	eor	r25, r24
    2610:	80 7f       	andi	r24, 0xF0	; 240
    2612:	98 27       	eor	r25, r24
    2614:	82 2b       	or	r24, r18
    2616:	8c 93       	st	X, r24
	UCSRC= (UCSRC&0xF7)|((Config_Ptr->stop_bit_select)<<3);
    2618:	a0 e4       	ldi	r26, 0x40	; 64
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e0 e4       	ldi	r30, 0x40	; 64
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	28 2f       	mov	r18, r24
    2624:	27 7f       	andi	r18, 0xF7	; 247
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	82 2b       	or	r24, r18
    263e:	8c 93       	st	X, r24

	/*
	 * insert the required DATA_BITS in  (1<<UCSZ0) , (1<<UCSZ1) and (1<<UCSZ2)
	 */
	UCSRC= (UCSRC&0xF9)|(((Config_Ptr->data_bits)&0x03)<<1);
    2640:	a0 e4       	ldi	r26, 0x40	; 64
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e0 e4       	ldi	r30, 0x40	; 64
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	28 2f       	mov	r18, r24
    264c:	29 7f       	andi	r18, 0xF9	; 249
    264e:	eb 81       	ldd	r30, Y+3	; 0x03
    2650:	fc 81       	ldd	r31, Y+4	; 0x04
    2652:	80 81       	ld	r24, Z
    2654:	88 2f       	mov	r24, r24
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	83 70       	andi	r24, 0x03	; 3
    265a:	90 70       	andi	r25, 0x00	; 0
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	82 2b       	or	r24, r18
    2662:	8c 93       	st	X, r24
	UCSRB= (UCSRB&0xFB)|(((Config_Ptr->data_bits)&0x04)<<2);
    2664:	aa e2       	ldi	r26, 0x2A	; 42
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ea e2       	ldi	r30, 0x2A	; 42
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	28 2f       	mov	r18, r24
    2670:	2b 7f       	andi	r18, 0xFB	; 251
    2672:	eb 81       	ldd	r30, Y+3	; 0x03
    2674:	fc 81       	ldd	r31, Y+4	; 0x04
    2676:	80 81       	ld	r24, Z
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	84 70       	andi	r24, 0x04	; 4
    267e:	90 70       	andi	r25, 0x00	; 0
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	82 2b       	or	r24, r18
    268a:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    268c:	eb 81       	ldd	r30, Y+3	; 0x03
    268e:	fc 81       	ldd	r31, Y+4	; 0x04
    2690:	83 81       	ldd	r24, Z+3	; 0x03
    2692:	94 81       	ldd	r25, Z+4	; 0x04
    2694:	a5 81       	ldd	r26, Z+5	; 0x05
    2696:	b6 81       	ldd	r27, Z+6	; 0x06
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	aa 1f       	adc	r26, r26
    269e:	bb 1f       	adc	r27, r27
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	aa 1f       	adc	r26, r26
    26a6:	bb 1f       	adc	r27, r27
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	aa 1f       	adc	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	9c 01       	movw	r18, r24
    26b2:	ad 01       	movw	r20, r26
    26b4:	80 e4       	ldi	r24, 0x40	; 64
    26b6:	92 e4       	ldi	r25, 0x42	; 66
    26b8:	af e0       	ldi	r26, 0x0F	; 15
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 0b 14 	call	0x2816	; 0x2816 <__udivmodsi4>
    26c4:	da 01       	movw	r26, r20
    26c6:	c9 01       	movw	r24, r18
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    26ce:	e0 e4       	ldi	r30, 0x40	; 64
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	89 2f       	mov	r24, r25
    26d8:	99 27       	eor	r25, r25
    26da:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    26dc:	e9 e2       	ldi	r30, 0x29	; 41
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	80 83       	st	Z, r24
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	80 72       	andi	r24, 0x20	; 32
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	b9 f3       	breq	.-18     	; 0x26fe <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2710:	ec e2       	ldi	r30, 0x2C	; 44
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2728:	eb e2       	ldi	r30, 0x2B	; 43
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	88 23       	and	r24, r24
    2730:	dc f7       	brge	.-10     	; 0x2728 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2732:	ec e2       	ldi	r30, 0x2C	; 44
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
}
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	00 d0       	rcall	.+0      	; 0x2744 <UART_sendString+0x6>
    2744:	0f 92       	push	r0
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	9b 83       	std	Y+3, r25	; 0x03
    274c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	0e c0       	rjmp	.+28     	; 0x276e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_sendByte>
		i++;
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	80 81       	ld	r24, Z
    2780:	88 23       	and	r24, r24
    2782:	39 f7       	brne	.-50     	; 0x2752 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <UART_receiveString+0xa>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9b 83       	std	Y+3, r25	; 0x03
    27a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27a4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	8c 01       	movw	r16, r24
    27b2:	02 0f       	add	r16, r18
    27b4:	13 1f       	adc	r17, r19
    27b6:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
    27ba:	f8 01       	movw	r30, r16
    27bc:	80 83       	st	Z, r24
    27be:	0f c0       	rjmp	.+30     	; 0x27de <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	8c 01       	movw	r16, r24
    27d2:	02 0f       	add	r16, r18
    27d4:	13 1f       	adc	r17, r19
    27d6:	0e 94 90 13 	call	0x2720	; 0x2720 <UART_recieveByte>
    27da:	f8 01       	movw	r30, r16
    27dc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	fc 01       	movw	r30, r24
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	80 81       	ld	r24, Z
    27f0:	83 32       	cpi	r24, 0x23	; 35
    27f2:	31 f7       	brne	.-52     	; 0x27c0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	10 82       	st	Z, r1
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
    2814:	08 95       	ret

00002816 <__udivmodsi4>:
    2816:	a1 e2       	ldi	r26, 0x21	; 33
    2818:	1a 2e       	mov	r1, r26
    281a:	aa 1b       	sub	r26, r26
    281c:	bb 1b       	sub	r27, r27
    281e:	fd 01       	movw	r30, r26
    2820:	0d c0       	rjmp	.+26     	; 0x283c <__udivmodsi4_ep>

00002822 <__udivmodsi4_loop>:
    2822:	aa 1f       	adc	r26, r26
    2824:	bb 1f       	adc	r27, r27
    2826:	ee 1f       	adc	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	a2 17       	cp	r26, r18
    282c:	b3 07       	cpc	r27, r19
    282e:	e4 07       	cpc	r30, r20
    2830:	f5 07       	cpc	r31, r21
    2832:	20 f0       	brcs	.+8      	; 0x283c <__udivmodsi4_ep>
    2834:	a2 1b       	sub	r26, r18
    2836:	b3 0b       	sbc	r27, r19
    2838:	e4 0b       	sbc	r30, r20
    283a:	f5 0b       	sbc	r31, r21

0000283c <__udivmodsi4_ep>:
    283c:	66 1f       	adc	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	1a 94       	dec	r1
    2846:	69 f7       	brne	.-38     	; 0x2822 <__udivmodsi4_loop>
    2848:	60 95       	com	r22
    284a:	70 95       	com	r23
    284c:	80 95       	com	r24
    284e:	90 95       	com	r25
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	bd 01       	movw	r22, r26
    2856:	cf 01       	movw	r24, r30
    2858:	08 95       	ret

0000285a <__prologue_saves__>:
    285a:	2f 92       	push	r2
    285c:	3f 92       	push	r3
    285e:	4f 92       	push	r4
    2860:	5f 92       	push	r5
    2862:	6f 92       	push	r6
    2864:	7f 92       	push	r7
    2866:	8f 92       	push	r8
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	ca 1b       	sub	r28, r26
    2884:	db 0b       	sbc	r29, r27
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	09 94       	ijmp

00002892 <__epilogue_restores__>:
    2892:	2a 88       	ldd	r2, Y+18	; 0x12
    2894:	39 88       	ldd	r3, Y+17	; 0x11
    2896:	48 88       	ldd	r4, Y+16	; 0x10
    2898:	5f 84       	ldd	r5, Y+15	; 0x0f
    289a:	6e 84       	ldd	r6, Y+14	; 0x0e
    289c:	7d 84       	ldd	r7, Y+13	; 0x0d
    289e:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    28a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    28a4:	b9 84       	ldd	r11, Y+9	; 0x09
    28a6:	c8 84       	ldd	r12, Y+8	; 0x08
    28a8:	df 80       	ldd	r13, Y+7	; 0x07
    28aa:	ee 80       	ldd	r14, Y+6	; 0x06
    28ac:	fd 80       	ldd	r15, Y+5	; 0x05
    28ae:	0c 81       	ldd	r16, Y+4	; 0x04
    28b0:	1b 81       	ldd	r17, Y+3	; 0x03
    28b2:	aa 81       	ldd	r26, Y+2	; 0x02
    28b4:	b9 81       	ldd	r27, Y+1	; 0x01
    28b6:	ce 0f       	add	r28, r30
    28b8:	d1 1d       	adc	r29, r1
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	ed 01       	movw	r28, r26
    28c6:	08 95       	ret

000028c8 <itoa>:
    28c8:	fb 01       	movw	r30, r22
    28ca:	9f 01       	movw	r18, r30
    28cc:	e8 94       	clt
    28ce:	42 30       	cpi	r20, 0x02	; 2
    28d0:	c4 f0       	brlt	.+48     	; 0x2902 <itoa+0x3a>
    28d2:	45 32       	cpi	r20, 0x25	; 37
    28d4:	b4 f4       	brge	.+44     	; 0x2902 <itoa+0x3a>
    28d6:	4a 30       	cpi	r20, 0x0A	; 10
    28d8:	29 f4       	brne	.+10     	; 0x28e4 <itoa+0x1c>
    28da:	97 fb       	bst	r25, 7
    28dc:	1e f4       	brtc	.+6      	; 0x28e4 <itoa+0x1c>
    28de:	90 95       	com	r25
    28e0:	81 95       	neg	r24
    28e2:	9f 4f       	sbci	r25, 0xFF	; 255
    28e4:	64 2f       	mov	r22, r20
    28e6:	77 27       	eor	r23, r23
    28e8:	0e 94 95 14 	call	0x292a	; 0x292a <__udivmodhi4>
    28ec:	80 5d       	subi	r24, 0xD0	; 208
    28ee:	8a 33       	cpi	r24, 0x3A	; 58
    28f0:	0c f0       	brlt	.+2      	; 0x28f4 <itoa+0x2c>
    28f2:	89 5d       	subi	r24, 0xD9	; 217
    28f4:	81 93       	st	Z+, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	a1 f7       	brne	.-24     	; 0x28e4 <itoa+0x1c>
    28fc:	16 f4       	brtc	.+4      	; 0x2902 <itoa+0x3a>
    28fe:	5d e2       	ldi	r21, 0x2D	; 45
    2900:	51 93       	st	Z+, r21
    2902:	10 82       	st	Z, r1
    2904:	c9 01       	movw	r24, r18
    2906:	0c 94 85 14 	jmp	0x290a	; 0x290a <strrev>

0000290a <strrev>:
    290a:	dc 01       	movw	r26, r24
    290c:	fc 01       	movw	r30, r24
    290e:	67 2f       	mov	r22, r23
    2910:	71 91       	ld	r23, Z+
    2912:	77 23       	and	r23, r23
    2914:	e1 f7       	brne	.-8      	; 0x290e <strrev+0x4>
    2916:	32 97       	sbiw	r30, 0x02	; 2
    2918:	04 c0       	rjmp	.+8      	; 0x2922 <strrev+0x18>
    291a:	7c 91       	ld	r23, X
    291c:	6d 93       	st	X+, r22
    291e:	70 83       	st	Z, r23
    2920:	62 91       	ld	r22, -Z
    2922:	ae 17       	cp	r26, r30
    2924:	bf 07       	cpc	r27, r31
    2926:	c8 f3       	brcs	.-14     	; 0x291a <strrev+0x10>
    2928:	08 95       	ret

0000292a <__udivmodhi4>:
    292a:	aa 1b       	sub	r26, r26
    292c:	bb 1b       	sub	r27, r27
    292e:	51 e1       	ldi	r21, 0x11	; 17
    2930:	07 c0       	rjmp	.+14     	; 0x2940 <__udivmodhi4_ep>

00002932 <__udivmodhi4_loop>:
    2932:	aa 1f       	adc	r26, r26
    2934:	bb 1f       	adc	r27, r27
    2936:	a6 17       	cp	r26, r22
    2938:	b7 07       	cpc	r27, r23
    293a:	10 f0       	brcs	.+4      	; 0x2940 <__udivmodhi4_ep>
    293c:	a6 1b       	sub	r26, r22
    293e:	b7 0b       	sbc	r27, r23

00002940 <__udivmodhi4_ep>:
    2940:	88 1f       	adc	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	5a 95       	dec	r21
    2946:	a9 f7       	brne	.-22     	; 0x2932 <__udivmodhi4_loop>
    2948:	80 95       	com	r24
    294a:	90 95       	com	r25
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	08 95       	ret

00002952 <_exit>:
    2952:	f8 94       	cli

00002954 <__stop_program>:
    2954:	ff cf       	rjmp	.-2      	; 0x2954 <__stop_program>
